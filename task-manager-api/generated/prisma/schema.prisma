// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  password      String
  name          String
  workspaces    WorkspaceMember[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  createdTasks  Task[]            @relation("TaskCreator")
  assignedTasks Task[]            @relation("TaskAssignee")
  comments      Comment[]
}

model Workspace {
  id        String            @id @default(uuid())
  name      String
  members   WorkspaceMember[]
  boards    Board[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model WorkspaceMember {
  id          String @id @default(uuid())
  role        String // admin, member, etc.
  userId      String
  workspaceId String

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId]) // evitar duplicados
}

model Board {
  id          String @id @default(uuid())
  name        String
  workspaceId String

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id           String  @id @default(uuid())
  title        String
  description  String?
  status       String // e.g., todo, doing, done
  boardId      String
  createdById  String
  assignedToId String?

  board      Board     @relation(fields: [boardId], references: [id])
  createdBy  User      @relation("TaskCreator", fields: [createdById], references: [id])
  assignedTo User?     @relation("TaskAssignee", fields: [assignedToId], references: [id])
  comments   Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(uuid())
  content String
  userId  String
  taskId  String

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
